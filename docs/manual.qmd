---
title: "Darwin Harbour Water Quality monitoring program analysis application manual"
author: "Murray Logan"
date: today
date-format: "DD/MM/YYYY"
format: 
  html:
    ## Format
    theme: spacelab
    css: resources/style.css
    html-math-method: mathjax
    ## Table of contents
    toc: true
    toc-float: true
    ## Numbering
    number-sections: true
    number-depth: 3
    ## Layout
    fig-caption-location: "bottom"
    fig-align: "center"
    fig-width: 8
    fig-height: 8
    fig-dpi: 72
    tbl-cap-location: top
    ## Code
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    highlight-style: zenburn
    ## Execution
    execute:
      echo: true
    ## Rendering
    embed-resources: true
    fontsize: 12pt
    mainfont: Arial
    mathfont: LiberationMono
    monofont: DejaVu Sans Mono
  pdf:
    toc: true
    margin-left: 2cm
    margin-right: 2cm
    margin-top: 2cm
    margin-bottom: 2cm
    fig-width: 9
    fontsize: 8pt
    keep-tex: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
## the following is a workaround to get the path to manual.pdf correct
format-links:
  - html
  - text: PDF
    href: manual.pdf
engine: knitr
output_dir: "docs"
documentclass: article
classoption: a4paper
bibliography: resources/references.bib
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(tinytex.engine = "xelatex")
```

# About
This document comprises the manual for the Darwin Harbour Water
Quality monitoring program analysis application. It provides
information on:

- a broad overview of the structure of the application
- the application dependencies and how to install them
- starting the application
- progressing through the analysis pipeline
- visualising, interpreting and extracting outputs
 
# Structural overview

[R Graphical and Statistical Environment](https://www.r-project.org/)
offers an ideal platform for developing and running complex
statistical analyses as well as presenting the outcomes via
professional graphical/tabular representations. As a completely
scripted language it also offers the potential for both full
transparency and reproducibility. Nevertheless, as the language, and
more specifically the extension packages are community developed and
maintained, the environment evolves over time. Similarly, the
underlying operating systems and programs on which R and its extension
packages depend (hereafter referred to as the _operating environment_)
also change over time. Consequently, the stability and reproducibility
of R codes have a tendency to change over time.

## Docker containers

One way to attempt to future proof a codebase that must be run upon a
potentially unpredictable operating environment is to **containerise**
the operating environment, such that it is preserved to remain
unchanged over time. Containers (specifically
[docker](https://www.docker.com/) containers) are lightweight
abstraction units that encapsulate applications and their dependencies
within standardized, self-contained execution environments. Leveraging
containerization technology, they package application code, runtime,
libraries, and system tools into isolated units (_containers_) that
abstract away underlying infrastructure differences, enabling
consistent and predictable execution across diverse computing
platforms.

Containers offer several advantages, such as efficient resource
utilization, rapid deployment, and scalability. They enable developers
to build, test, and deploy applications with greater speed and
flexibility. Docker containers have become a fundamental building
block in modern software development, enabling the development and
deployment of applications in a consistent and predictable manner
across various environments.

## Shiny applications

[Shiny](https://shiny.posit.co/) is a web application framework for R
that enables the creation of interactive and data-driven web
applications directly from R scripts. Developed by
[Rstudio](https://posit.co/), Shiny simplifies the process of turning
analyses into interactive web-based tools without the need for
extensive web development expertise.

What makes Shiny particularly valuable is its seamless integration
with R, allowing statisticians and data scientists to build and deploy
bespoke statistical applications, thereby making data visualization,
exploration, and analysis accessible to a broader audience. With its
interactive and user-friendly nature, Shiny serves as a powerful tool
for sharing insights and engaging stakeholders in a more intuitive and
visual manner.
## Git and github

Git, a distributed version control system, and
[GitHub](https://github.com/), a web-based platform for hosting and
collaborating on Git repositories, play pivotal roles in enhancing
reproducibility and transparency in software development. By tracking
changes in source code and providing a centralized platform for
collaborative work, Git and GitHub enable developers to maintain a
detailed history of code alterations. This history serves as a
valuable asset for ensuring the reproducibility of software projects,
allowing users to trace and replicate specific versions of the
codebase.

GitHub Actions (an integrated workflow automation feature of GitHub),
automates tasks such as building, testing, and deploying applications
and artifacts. Notably, through workflow actions, GitHub Actions can
build docker containers and act as a container registry. This
integration enhances the overall transparency of software development
workflows, making it easier to share, understand, and reproduce
projects collaboratively.

@fig-diagram provides a schematic overview of the relationship
between the code produced by the developer, the Github cloud
repositiory and container registry and the shiny docker container run
by user.


```{r}
#| label: fig-diagram
#| engine: tikz
#| fig-cap: Diagram illustrating the relationship between the code produced by the developer and the shiny docker container utilised by user with a Github cloud conduit.  The developed codebase includes a Shiny R application with R backend, `Dockerfile` (instructions used to assemble a full operating environment) and github workflow file (instructions for building and packaging the docker image on github via `actions`).
#| file: resources/diagram.tikz 
#| echo: false
#| eval: true
#| engine-opts:
#|   template: "resources/tikz-standalone.tex"
```
# Installation

## Installing docker desktop

To retrieve and run docker containers requires the installation of
[Docker Desktop](https://www.docker.com/products/docker-desktop/) on
Windows and MacOSx

### Windows

The steps for installing Docker Desktop are:

- **Download the Installer:** head to
  <https://docs.docker.com/desktop/install/windows-install/> and follow
  the instructions for downloading the appropriate installer for your
  Windows version (Home or Pro).

- **Run the Installer:** double-click the downloaded file and follow
  the on-screen instructions from the installation wizard. Accept the
  license agreement and choose your preferred installation location.

- **Configure Resources (Optional):** Docker Desktop might suggest
  allocating some system resources like CPU and memory. These settings
  can be adjusted later, so feel free to use the defaults for now.

- **Start the Docker Engine:** once installed, click the "Start Docker
  Desktop" button. You may see a notification in the taskbar - click
  it to confirm and allow Docker to run in the background.

- **Verification:** open a terminal (or Powershell) and run `docker --version`. 
  If all went well, you should see information about the
  installed Docker Engine version.

Additional Tips:

- Ensure Hyper-V (virtualization) is enabled in your BIOS settings for optimal
  performance.


## Installing the and running the app

The task of installing and running the app is performed via a single
**deploy script** (`deploy_wq.bat` on Windows or `deploy_wq.sh` on
Linux/MacOSX/wsl). For this to work properly, the deploy script should
be placed in a folder along with two additional folders (one called
`input` and the other called `parameters`) that contains the input
datasets (in csv format) and run time parameters. This structure is
illustrated below for Windows.

```
\
|- deploy_wq.bat
|- input
   |- 16_wq.csv
   |- 17_wq.csv
   |- overwrites.csv
   |- weights_m.csv
   |- weights_s.csv
|- parameters
   |- config.ini
   |- water_quality_guidelines.csv
   |- spatial.csv
   |- GIS
      |- RCZ_rev24.*
      |- SBZone_upper.*
      |- Middle_Harbour_Upper.*
```

::: {.callout-note}
In the above illustration, there are two example water quality
datasets (`16_wq.csv` and `17_wq.csv`). To ensure that the application
correctly identifies them as water quality datasets, it is important
that they are named according to the following format: `<yy>_wq.csv`
where the `<yy>` represents a two digit year (e.g. 16 for 2016). For
additional information on the contents of these files, please see
@sec-data-requirements.
:::

To set up the above structure:

1. create a new folder on your computer in a location of your choice
   that you are likely to remember and easily locate (e.g. on the
   desktop). Whilst the name of the folder is not important, it is
   recommended that it be named after the project (e.g.
   `darwin_harbour_sediment_monitoring`).

2. download the deploy script from the projects github repository

   a. go to the projects github repository
      (<https://github.com/open-AIMS/dh_wq_monitoring.git>) in a
      browser

   b. click on either the `deploy_wq.bat` (Windows) or `deploy_wq.sh`
      (Linux/MacOSX/wsl).

      ![](resources/github_deploy_script.png)

   c. click on the download button and select the project folder as
      the location to download the file to. If the file is
      automatically downloaded to a downloads folder, move the file to
      the project folder.

      ![](resources/github_deploy_script2.png)

3. within the project folder, create folders called `inputs` and
   `parameters` (as outlined above) and place all the appropriate data
   sets into these folders

To run the app, navigate inside of the project folder and run
(typically double click) on the deploy script. Upon doing so, you will
be presented with a directory selection window that is prompting for
the path of the project folder. Navigate to and select the project
folder before clicking the "OK" button. Shortly thereafter, the
application will appear in a browser tab.

::: {.callout-note collapse=true}
## More specific information about the `deploy_wq.bat` script
The `deploy_wq.bat` script performs the following:

1. defines paths to the project repository and local project folder
2. checks if `docker` is installed and available from the command line
   for the current user
3. checks if `docker` is running
4. query the user for the location of the project folder
5. determine whether there are any updates to the `docker` image and
   if so pull them down
6. run the `docker` container
7. open the shiny app in a browser
:::
# The Darwin Harbour Water Quality Monitoring Program Analysis App

{{< include ../md/instructions.md >}}


@fig-diagram2 provides a schematic overview of the sequence of
filesystem events that occur during the development, deployment and
running of this app.

1. the developed codebase is pushed to github and if necessary
  continuous integration (github actions) is triggered. The continuous
  integration will re-build and host a docker image as well as rebuild
  the manual.
2. when the client runs the `deploy_wq.bat` (or `deploy_wq.sh`) script, it
   will check whether docker is running and get input from the user
   about the location of the project directory.
3. github will be queried
   to discover if a new docker image is available. If so, then the new
   image will be pulled down locally and run (if docker is runnning). 
4. the docker container will be run and this will trigger git within
   the container to pull down the latest version of the codebase from
   github to a temporary repo in the container. As the container is
   starting up, it will mount the project folder so that its contents
   are available to the environment within container and outputs
   produced within the container are available to the host.
5. some of the files in the temporary repo will be copied to a folder
   within the project folder.
6. the shiny app will start up on `port 3838` of the localhost and
   this will be offered to the default browser.
7. as the shiny app progresses through each of the analysis stages,
   more data will be added to various folders of the project
   directory.

```{r}
#| label: fig-diagram2
#| engine: tikz
#| fig-cap: Diagram illustrating the sequence of filesystem events that occur during the development, deployment and running of this app.
#| file: resources/diagram2.tikz 
#| echo: false
#| eval: true
#| engine-opts:
#|   template: "resources/tikz-standalone.tex"
```


